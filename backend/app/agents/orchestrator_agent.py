# backend/app/agents/orchestrator_agent.py
import logging
from typing import List

from app.agents.base_agent import BaseAgent
from app.models import AgentState, OptimizationRecommendation

logger = logging.getLogger(__name__)


class LocationOptimizerOrchestrator(BaseAgent):
    """Master orchestrator that coordinates all agents and generates final recommendations"""

    def __init__(self):
        super().__init__("Location Optimizer Orchestrator")

    async def execute(self, state: AgentState) -> AgentState:
        """Generate final optimized recommendations"""
        try:
            logger.info("Starting final optimization orchestration")

         
            recommendations = await self._generate_final_recommendations(state)
            state.recommendations = recommendations

            logger.info(f"Generated {len(recommendations)} final recommendations")

        except Exception as e:
            error_msg = f"Orchestration failed: {str(e)}"
            logger.error(error_msg)
            state.errors.append(error_msg)

        return state

    async def _generate_final_recommendations(
        self, state: AgentState
    ) -> List[OptimizationRecommendation]:
        """Generate final recommendations using all agent data"""
        logger.info("Orchestration completed - recommendations generated by workflow")
        return state.recommendations
